import supertest from "supertest";
import { Types } from "mongoose";

import { server, connection } from "../../../server";

import * as moduleServices from "../moduleServices";

import { Module } from "../../../typings/types";

type Service =
  | "insertModule"
  | "findModuleByProperty"
  | "findFilterAllModules"
  | "findFilterModuleByProperty"
  | "modifyFilterModule"
  | "removeFilterModule"
  | "findSchoolById";

describe("Resource => Module", () => {
  /* mock services */
  // just one return
  const mockService = (payload: any, service: Service) => {
    return jest.spyOn(moduleServices, service).mockReturnValue(payload);
  };

  /* hooks */
  afterAll(() => {
    connection.close();
  });

  /* end point url */
  const endPointUrl = "/api/v1/modules/";

  /* inputs */
  const validMockModuleId = new Types.ObjectId().toString();
  const validMockSchoolId = new Types.ObjectId().toString();
  const otherValidMockId = new Types.ObjectId().toString();
  const invalidMockId = "63c5dcac78b868f80035asdf";
  const newModule = {
    school_id: validMockSchoolId,
    name: "Module 001",
  };
  const newModuleMissingValues = {
    school_i: validMockSchoolId,
    nam: "Module 001",
  };
  const newModuleEmptyValues = {
    school_id: "",
    name: "",
  };
  const newModuleNotValidDataTypes = {
    school_id: invalidMockId,
    name: 432,
  };
  const newModuleWrongLengthValues = {
    school_id: validMockSchoolId,
    name: "fdssdfsdfsdfeqwerdfasdf12341234asdfjñlkjsdfi07879sdf0fdssdfsdfsdfeqwerdfasdf12341234asdfjñlkj879sdf01",
  };

  /* payloads */
  const schoolPayload = {
    _id: validMockSchoolId,
    name: "School 001",
  };
  const schoolNullPayload = null;
  const modulePayload = {
    _id: validMockModuleId,
    school_id: validMockSchoolId,
    name: "Module 001",
  };
  const moduleNullPayload = null;
  const modulesPayload = [
    {
      _id: validMockModuleId,
      school_id: new Types.ObjectId().toString(),
      name: "Module 001",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Module 002",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Module 003",
    },
  ];
  const modulesNullPayload: Module[] = [];

  // test blocks
  describe("POST /module ", () => {
    describe("module::post::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        // code
      });
    });
    describe("module::post::02 - Passing fields with empty values", () => {
      it("should return an empty fields error", async () => {
        // code
      });
    });
    describe("module::post::03 - Passing an invalid type as a value", () => {
      it("should return a not valid value error", async () => {
        // code
      });
    });
    describe("module::post::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        // code
      });
    });
    describe("module::post::05 - Passing an non-existent school in the body", () => {
      it("should return a non-existent school error", async () => {
        // code
      });
    });
    describe("module::post::06 - Passing an already existing module name", () => {
      it("should return an existing module name", async () => {
        // code
      });
    });
    describe("module::post::07 - Passing a module but not being created", () => {
      it("should not create a field", async () => {
        // code
      });
    });
    describe("module::post::08 - Passing a module correctly to create", () => {
      it("should create a module", async () => {
        // mock services
        const findSchool = mockService(schoolPayload, "findSchoolById");
        const findModule = mockService(
          moduleNullPayload,
          "findModuleByProperty"
        );
        const insertModule = mockService(modulePayload, "insertModule");

        //api call
        const { statusCode, body } = await supertest(server)
          .post(`${endPointUrl}`)
          .send(newModule);

        // assertions
        expect(body).toStrictEqual({
          msg: "Module created successfully!",
        });
        expect(statusCode).toBe(201);
        expect(findSchool).toHaveBeenCalled();
        expect(findSchool).toHaveBeenCalledWith(
          newModule.school_id,
          "-createdAt -updatedAt"
        );
        expect(findModule).toHaveBeenCalled();
        expect(findModule).toHaveBeenCalledWith(
          { school_id: newModule.school_id, name: newModule.name },
          "-createdAt -updatedAt"
        );
        expect(insertModule).toHaveBeenCalled();
        expect(insertModule).toHaveBeenCalledWith(newModule);
      });
    });
  });

  describe("GET /module ", () => {
    describe("module - GET", () => {
      describe("module::get::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
          // mock services
          const findModules = mockService(
            modulesNullPayload,
            "findFilterAllModules"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_i: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "body",
              msg: "Please add a school id",
              param: "school_id",
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModules).not.toHaveBeenCalled();
          expect(findModules).not.toHaveBeenCalledWith(
            { school_id: null },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get::02 - passing fields with empty values", () => {
        it("should return an empty values error", async () => {
          // mock services
          const findModules = mockService(
            modulesNullPayload,
            "findFilterAllModules"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_id: "" });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "body",
              msg: "The school id field is empty",
              param: "school_id",
              value: "",
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModules).not.toHaveBeenCalled();
          expect(findModules).not.toHaveBeenCalledWith(
            { school_id: "" },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get::03 - passing invalid ids", () => {
        it("should return an invalid id error", async () => {
          // mock services
          const findModules = mockService(
            modulesNullPayload,
            "findFilterAllModules"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_id: invalidMockId });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "body",
              msg: "The school id is not valid",
              param: "school_id",
              value: invalidMockId,
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModules).not.toHaveBeenCalled();
          expect(findModules).not.toHaveBeenCalledWith(
            { school_id: invalidMockId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get::04 - Requesting all fields but not finding any", () => {
        it("should not get any fields", async () => {
          // mock services
          const findModules = mockService(
            modulesNullPayload,
            "findFilterAllModules"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_id: otherValidMockId });

          // assertions
          expect(body).toStrictEqual({
            msg: "No modules found",
          });
          expect(statusCode).toBe(404);
          expect(findModules).toHaveBeenCalled();
          expect(findModules).toHaveBeenCalledWith(
            { school_id: otherValidMockId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get::05 - Requesting all fields correctly", () => {
        it("should get all fields", async () => {
          // mock services
          const findModules = mockService(
            modulesPayload,
            "findFilterAllModules"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual([
            {
              _id: expect.any(String),
              school_id: expect.any(String),
              name: "Module 001",
            },
            {
              _id: expect.any(String),
              school_id: expect.any(String),
              name: "Module 002",
            },
            {
              _id: expect.any(String),
              school_id: expect.any(String),
              name: "Module 003",
            },
          ]);
          expect(statusCode).toBe(200);
          expect(findModules).toHaveBeenCalled();
          expect(findModules).toHaveBeenCalledWith(
            { school_id: validMockSchoolId },
            "-createdAt -updatedAt"
          );
        });
      });
    });
    describe("module - GET/:id", () => {
      describe("module::get/:id::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
          // mock services
          const findModule = mockService(
            moduleNullPayload,
            "findModuleByProperty"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${validMockModuleId}`)
            .send({ school_i: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "body",
              msg: "Please add a school id",
              param: "school_id",
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModule).not.toHaveBeenCalled();
          expect(findModule).not.toHaveBeenCalledWith(
            { school_id: null, _id: validMockModuleId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get/:id::02 - Passing fields with empty values", () => {
        it("should return an empty values error", async () => {
          // mock services
          const findModule = mockService(
            moduleNullPayload,
            "findModuleByProperty"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${validMockModuleId}`)
            .send({ school_id: "" });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "body",
              msg: "The school id field is empty",
              param: "school_id",
              value: "",
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModule).not.toHaveBeenCalled();
          expect(findModule).not.toHaveBeenCalledWith(
            { school_id: "", _id: validMockModuleId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get/:id::03 - Passing invalid ids", () => {
        it("should return an invalid id error", async () => {
          // mock services
          const findModule = mockService(
            moduleNullPayload,
            "findModuleByProperty"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${invalidMockId}`)
            .send({ school_id: invalidMockId });

          // assertions
          expect(body).toStrictEqual([
            {
              location: "params",
              msg: "The module id is not valid",
              param: "id",
              value: invalidMockId,
            },
            {
              location: "body",
              msg: "The school id is not valid",
              param: "school_id",
              value: invalidMockId,
            },
          ]);
          expect(statusCode).toBe(400);
          expect(findModule).not.toHaveBeenCalled();
          expect(findModule).not.toHaveBeenCalledWith(
            { school_id: invalidMockId, _id: invalidMockId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get/:id::04 - Requesting a field but not finding it", () => {
        it("should not get a school", async () => {
          // mock services
          const findModule = mockService(
            moduleNullPayload,
            "findModuleByProperty"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${otherValidMockId}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual({
            msg: "Module not found",
          });
          expect(statusCode).toBe(404);
          expect(findModule).toHaveBeenCalled();
          expect(findModule).toHaveBeenCalledWith(
            { school_id: validMockSchoolId, _id: otherValidMockId },
            "-createdAt -updatedAt"
          );
        });
      });
      describe("module::get/:id::05 - Requesting a field correctly", () => {
        it("should get a field", async () => {
          // mock services
          const findModule = mockService(
            modulePayload,
            "findModuleByProperty"
          );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${validMockModuleId}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual({
            _id: validMockModuleId,
            school_id: validMockSchoolId,
            name: "Module 001",
          });
          expect(statusCode).toBe(200);
          expect(findModule).toHaveBeenCalled();
          expect(findModule).toHaveBeenCalledWith(
            { school_id: validMockSchoolId, _id: validMockModuleId },
            "-createdAt -updatedAt"
          );
        });
      });
    });
  });

  describe("PUT /module ", () => {
    describe("module::put::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        // code
      });
    });
    describe("module::put::02 - Passing fields with empty values", () => {
      it("should return an empty field error", async () => {
        // code
      });
    });
    describe("module::put::03 - Passing an invalid type as field value", () => {
      it("should return a not valid value error", async () => {
        // code
      });
    });
    describe("module::put::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        // code
      });
    });
    describe("module::put::05 - Passing an already existing module name", () => {
      it("should not update a module", async () => {
        // code
      });
    });
    describe("module::put::06 - Passing a module but not updating it because it does not match the filters", () => {
      it("should not update a module", async () => {
        // code
      });
    });
    describe("module::put::07 - Passing a module correctly to update", () => {
      it("should update a module", async () => {
        // mock services
        const duplicateModuleName = mockService(
          moduleNullPayload,
          "findModuleByProperty"
        );
        const updateModule = mockService(
          modulePayload,
          "modifyFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .put(`${endPointUrl}${validMockModuleId}`)
          .send(newModule);

        // assertions
        expect(body).toStrictEqual({ msg: "Module updated" });
        expect(statusCode).toBe(200);
        expect(duplicateModuleName).toHaveBeenCalled();
        expect(duplicateModuleName).toHaveBeenCalledWith(
          { school_id: newModule.school_id, name: newModule.name },
          "-createdAt -updatedAt"
        );
        expect(updateModule).toHaveBeenCalled();
        expect(updateModule).toHaveBeenCalledWith(
          { _id: validMockModuleId, school_id: newModule.school_id },
          newModule
        );
      });
    });
  });

  describe("DELETE /module ", () => {
    describe("module::delete::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        // mock services
        const deleteModule = mockService(
          moduleNullPayload,
          "removeFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .delete(`${endPointUrl}${validMockModuleId}`)
          .send({ school_i: validMockSchoolId });

        // assertions
        expect(body).toStrictEqual([
          {
            location: "body",
            msg: "Please add a school id",
            param: "school_id",
          },
        ]);
        expect(statusCode).toBe(400);
        expect(deleteModule).not.toHaveBeenCalled();
        expect(deleteModule).not.toHaveBeenCalledWith({
          school_id: null,
          _id: validMockModuleId,
        });
      });
    });
    describe("module::delete::02 - Passing fields with empty values", () => {
      it("should return a empty fields error", async () => {
        // mock services
        const deleteModule = mockService(
          moduleNullPayload,
          "removeFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .delete(`${endPointUrl}${validMockModuleId}`)
          .send({ school_id: "" });

        // assertions
        expect(body).toStrictEqual([
          {
            location: "body",
            msg: "The school id field is empty",
            param: "school_id",
            value: "",
          },
        ]);
        expect(statusCode).toBe(400);
        expect(deleteModule).not.toHaveBeenCalled();
        expect(deleteModule).not.toHaveBeenCalledWith({
          _id: validMockModuleId,
          school_id: "",
        });
      });
    });
    describe("module::delete::03 - Passing invalid ids", () => {
      it("should return an invalid id error", async () => {
        // mock services
        const deleteModule = mockService(
          moduleNullPayload,
          "removeFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .delete(`${endPointUrl}${invalidMockId}`)
          .send({ school_id: invalidMockId });

        // assertions
        expect(body).toStrictEqual([
          {
            location: "params",
            msg: "The module id is not valid",
            param: "id",
            value: invalidMockId,
          },
          {
            location: "body",
            msg: "The school id is not valid",
            param: "school_id",
            value: invalidMockId,
          },
        ]);
        expect(statusCode).toBe(400);
        expect(deleteModule).not.toHaveBeenCalled();
        expect(deleteModule).not.toHaveBeenCalledWith({
          school_id: "",
          _id: "",
        });
      });
    });
    describe("module::delete::04 - Passing a module id but not deleting it", () => {
      it("should not delete a school", async () => {
        // mock services
        const deleteModule = mockService(
          moduleNullPayload,
          "removeFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .delete(`${endPointUrl}${validMockSchoolId}`)
          .send({ school_id: validMockSchoolId });

        // assertions
        expect(body).toStrictEqual({ msg: "Module not deleted" });
        expect(statusCode).toBe(404);
        expect(deleteModule).toHaveBeenCalled();
        expect(deleteModule).toHaveBeenCalledWith({
          school_id: validMockSchoolId,
          _id: validMockSchoolId,
        });
      });
    });
    describe("module::delete::05 - Passing a module id correctly to delete", () => {
      it("should delete a field", async () => {
        // mock services
        const deleteModule = mockService(
          modulePayload,
          "removeFilterModule"
        );

        // api call
        const { statusCode, body } = await supertest(server)
          .delete(`${endPointUrl}${validMockModuleId}`)
          .send({ school_id: validMockSchoolId });

        // assertions
        expect(body).toStrictEqual({ msg: "Module deleted" });
        expect(statusCode).toBe(200);
        expect(deleteModule).toHaveBeenCalled();
        expect(deleteModule).toHaveBeenCalledWith({
          school_id: validMockSchoolId,
          _id: validMockModuleId,
        });
      });
    });
  });
});
