import { Request, Response } from "express";
import { StatusCodes } from "http-status-codes";
import BadRequestError from "../errors/bad-request";
import ConflictError from "../errors/conflict";
import NotFoundError from "../errors/not-found";

import {
  insertResource,
  findResourceById,
  findFilterAllResources,
  deleteFilterResource,
  findFilterResourceByProperty,
  updateFilterResource,
} from "../services/mongoServices";

/* models */
//  const baseResource = "baseResource";

// @desc create a baseResource
// @route POST /api/v1/baseResources
// @access Private
// @fields: body {fieldOne:[string] , fieldTwo:[string], fieldThree:[string]}
const createBaseResource = async ({ body }: Request, res: Response) => {  
  // /* destructure the fields */

  // /* create baseResource */
  // const baseResourceCreated = await insertResource(body, baseResourceModel);
  // if (!baseResourceCreated) {
  //   throw new BadRequestError("BaseResource not created!");
  // }
  // res.status(StatusCodes.OK).json({ msg: "BaseResource created!" });
  res.status(StatusCodes.OK).json({ msg: "BaseResource post endpoint working!" });  
};

// @desc get all the BaseResources
// @route GET /api/v1/BaseResources
// @access Private
// @fields: body {fieldOne:[string]}
const getBaseResources = async ({ body }: Request, res: Response) => {
  // /* destructure the fields */
//   const { school_id } = body;
//   /* filter by school id */
//   const filters = { school_id: school_id };
//   const fieldsToReturn = "-createdAt -updatedAt";
//   const baseResourcesFound = await findFilterAllResources(
//     filters,
//     fieldsToReturn,
//     baseResourceModel
//   );
//   /* get all fields */
//   if (baseResourcesFound?.length === 0) {
//     throw new NotFoundError("No baseResources found");
//   }
//   res.status(StatusCodes.OK).json(baseResourcesFound);
  res.status(StatusCodes.OK).json({ msg: "BaseResource get endpoint working!" });  

};

// @desc get the BaseResource by id
// @route GET /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body: {fieldOne:[string]}
const getBaseResource = async ({ params, body }: Request, res: Response) => {  
  // /* destructure the fields */
// const { id: baseResourceId } = params;
// const { school_id } = body;
// /* get the field */
// const filters = [{ _id: baseResourceId }, { school_id: school_id }];
// const fieldsToReturn = "-createdAt -updatedAt";
// const baseResourceFound = await findFilterResourceByProperty(
//   filters,
//   fieldsToReturn,
//   baseResourceModel
// );
// if (baseResourceFound?.length === 0) {
//   throw new NotFoundError("BaseResource not found");
// }
// res.status(StatusCodes.OK).json(breakFound);
  res.status(StatusCodes.OK).json({ msg: "BaseResource get/:id endpoint working!" });  
};

// @desc update a BaseResource
// @route PUT /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body {fieldOne:[string] , fieldTwo:[string], fieldThree:[string]}
const updateBaseResource = async ({ params, body }: Request, res: Response) => {
  // /* destructure the fields */
  
// const { id: baseResourceId } = params;
// const {  } = body;
// /* update baseResource */
// const filtersUpdate = [{ _id: baseResourceId }, { school_id: school_id }];
// const baseResourceUpdated = await updateFilterResource(
//   filtersUpdate,
//   body,
//   baseResourceModel
// );
// if (!baseResourceUpdated) {
//   throw new NotFoundError("BaseResource not updated");
// }
// res.status(StatusCodes.OK).json({ msg: "BaseResource updated!" });
res.status(StatusCodes.OK).json({ msg: "BaseResource put endpoint working!" });
};

// @desc delete a BaseResource
// @route DELETE /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body: {fieldOne:[string]}
const deleteBaseResource = async ({ params, body }: Request, res: Response) => {  
  /* destructure the fields from the params and body */
// const { id: baseResourceId } = params;
// const { school_id } = body;
// /* delete baseResource */
// const filtersDelete = { _id: baseResourceId, school_id: school_id };
// const baseResourceDeleted = await deleteFilterResource(filtersDelete, baseResourceModel);
// if (!baseResourceDeleted) {
//   throw new NotFoundError("BaseResource not deleted");
// }
// res.status(StatusCodes.OK).json({ msg: "BaseResource deleted" });
  res.status(StatusCodes.OK).json({ msg: "BaseResource delete endpoint working!" });  
};

export {
  createBaseResource,
  getBaseResources,
  getBaseResource,
  updateBaseResource,
  deleteBaseResource,
};
