import { Request, Response } from "express";
import { StatusCodes } from "http-status-codes";
import BadRequestError from "../errors/bad-request";
import ConflictError from "../errors/conflict";
import NotFoundError from "../errors/not-found";

import {
  insertResource,
  findResourceById,
  findFilterAllResources,
  deleteFilterResource,
  findFilterResourceByProperty,
  updateFilterResource,
} from "../services/mongoServices";

/* models */
//  const baseResource = "baseResource";

// @desc create a baseResource
// @route POST /api/v1/baseResources
// @access Private
// @fields: body {fieldOne:[string] , fieldTwo:[string], fieldThree:[string]}
const createBaseResource = async ({ body }: Request, res: Response) => {  
  /* destructure the fields */
  // const { school_id, schedule_id, numberMinutes, breakStart } = body;
  // /* find schedule by id, and populate its properties */
  // const fieldsToReturnSchedule = "-createdAt -updatedAt";
  // const fieldsToPopulateSchedule = "school_id";
  // const fieldsToReturnPopulateSchedule = "-createdAt -updatedAt";
  // const scheduleFound = await findPopulateResourceById(
  //   schedule_id,
  //   fieldsToReturnSchedule,
  //   fieldsToPopulateSchedule,
  //   fieldsToReturnPopulateSchedule,
  //   scheduleModel
  // );
  // if (!scheduleFound) {
  //   throw new NotFoundError("Please make sure the schedule exists");
  // }
  // /* check if the school exists*/
  // if (scheduleFound?.school_id?.toString() == null) {
  //   throw new BadRequestError("Please make sure the school exists");
  // }
  // /* check if the passed school id is the same as the schedule school id*/
  // if (scheduleFound?.school_id?._id?.toString() !== school_id) {
  //   throw new BadRequestError(
  //     "Please make sure the schedule belongs to the school"
  //   );
  // }
  // /* check if the break start starts earlier than the day shift start */
  // if (scheduleFound.dayStart > breakStart) {
  //   throw new BadRequestError(
  //     "Please take into account that the break start time cannot be earlier than the schedule start time"
  //   );
  // }
  // /* check if the break fits within the schedule shift leaving room for at least a one-unit class before and after */
  // if (
  //   scheduleFound.shiftNumberMinutes <
  //   scheduleFound.classUnitMinutes * 2 + numberMinutes
  // ) {
  //   throw new BadRequestError(
  //     "Please make sure there is enough time to have at least 2 one-unit classes one before and one after the break"
  //   );
  // }
  // /* create break */
  // const breakCreated = await insertResource(body, breakModel);
  // if (!breakCreated) {
  //   throw new BadRequestError("Break not created!");
  // }
  // res.status(StatusCodes.OK).json({ msg: "Break created!" });
  res.status(StatusCodes.OK).json({ msg: "BaseResource post endpoint working!" });  
};

// @desc get all the BaseResources
// @route GET /api/v1/BaseResources
// @access Private
// @fields: body {fieldOne:[string]}
const getBaseResources = async ({ body }: Request, res: Response) => {
  // /* destructure the fields */
//   const { school_id } = body;
//   /* filter by school id */
//   const filters = { school_id: school_id };
//   const fieldsToReturn = "-createdAt -updatedAt";
//   const baseResourcesFound = await findFilterAllResources(
//     filters,
//     fieldsToReturn,
//     baseResourceModel
//   );
//   /* get all fields */
//   if (baseResourcesFound?.length === 0) {
//     throw new NotFoundError("No baseResources found");
//   }
//   res.status(StatusCodes.OK).json(baseResourcesFound);
};

// @desc get the BaseResource by id
// @route GET /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body: {fieldOne:[string]}
const getBaseResource = async ({ params, body }: Request, res: Response) => {  
  // /* destructure the fields */
// const { id: baseResourceId } = params;
// const { school_id } = body;
// /* get the field */
// const filters = [{ _id: baseResourceId }, { school_id: school_id }];
// const fieldsToReturn = "-createdAt -updatedAt";
// const baseResourceFound = await findFilterResourceByProperty(
//   filters,
//   fieldsToReturn,
//   baseResourceModel
// );
// if (baseResourceFound?.length === 0) {
//   throw new NotFoundError("BaseResource not found");
// }
// res.status(StatusCodes.OK).json(breakFound);
};

// @desc update a BaseResource
// @route PUT /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body {fieldOne:[string] , fieldTwo:[string], fieldThree:[string]}
const updateBaseResource = async ({ params, body }: Request, res: Response) => {
  // /* destructure the fields */
// const { id: baseResourceId } = params;
// const { school_id, schedule_id, numberMinutes, baseResourceStart } = body;
// /* find schedule by id, and populate its properties */
// const fieldsToReturnSchedule = "-createdAt -updatedAt";
// const fieldsToPopulateSchedule = "school_id";
// const fieldsToReturnPopulateSchedule = "-createdAt -updatedAt";
// const scheduleFound = await findPopulateResourceById(
//   schedule_id,
//   fieldsToReturnSchedule,
//   fieldsToPopulateSchedule,
//   fieldsToReturnPopulateSchedule,
//   scheduleModel
// );
// if (!scheduleFound) {
//   throw new NotFoundError("Please make sure the schedule exists");
// }
// /* check if the school exists*/
// if (scheduleFound?.school_id?.toString() == null) {
//   throw new BadRequestError("Please make sure the school exists");
// }
// /* check if the passed school id is the same as the schedule school id*/
// if (scheduleFound?.school_id?._id?.toString() !== school_id) {
//   throw new BadRequestError(
//     "Please make sure the schedule belongs to the school"
//   );
// }
// /* check if the baseResource start starts earlier than the day shift start */
// if (scheduleFound.dayStart > baseResourceStart) {
//   throw new BadRequestError(
//     "Please take into account that the baseResource start time cannot be earlier than the schedule start time"
//   );
// }
// /* check if the baseResource fits within the schedule shift leaving room for at least a one-unit class before and after */
// if (
//   scheduleFound.shiftNumberMinutes <
//   scheduleFound.classUnitMinutes * 2 + numberMinutes
// ) {
//   throw new BadRequestError(
//     "Please make sure there is enough time to have at least 2 one-unit classes one before and one after the baseResource"
//   );
// }
// /* update baseResource */
// const filtersUpdate = [{ _id: baseResourceId }, { school_id: school_id }];
// const baseResourceUpdated = await updateFilterResource(
//   filtersUpdate,
//   body,
//   baseResourceModel
// );
// if (!baseResourceUpdated) {
//   throw new NotFoundError("BaseResource not updated");
// }
// res.status(StatusCodes.OK).json({ msg: "BaseResource updated!" });
res.status(StatusCodes.OK).json({ msg: "BaseResource put endpoint working!" });
};

// @desc delete a BaseResource
// @route DELETE /api/v1/BaseResources/:id
// @access Private
// @fields: params: {id:[string]},  body: {fieldOne:[string]}
const deleteBaseResource = async ({ params, body }: Request, res: Response) => {  
  /* destructure the fields from the params and body */
// const { id: baseResourceId } = params;
// const { school_id } = body;
// /* delete baseResource */
// const filtersDelete = { _id: baseResourceId, school_id: school_id };
// const baseResourceDeleted = await deleteFilterResource(filtersDelete, baseResourceModel);
// if (!baseResourceDeleted) {
//   throw new NotFoundError("BaseResource not deleted");
// }
// res.status(StatusCodes.OK).json({ msg: "BaseResource deleted" });
};

export {
  createBaseResource,
  getBaseResources,
  getBaseResource,
  updateBaseResource,
  deleteBaseResource,
};
