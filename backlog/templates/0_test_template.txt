describe("Resource => baseResource", () => {
  // end point url
  const endPointUrl = "/api/v1/baseResources/";

  // inputs
  const validMockBaseResourceId = new Types.ObjectId().toString();
  const validMockSchoolId = new Types.ObjectId().toString();
  //cspell:disable-next-line
  const invalidMockId = "63c5dcac78b868f80035asdf";
  const newBaseResource = {
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const newBaseResourceMissingValues = {
    school_i: validMockSchoolId,
    nam: "Mathematics",
  };
  const newBaseResourceEmptyValues = {
    school_id: "",
    name: "",
  };
  const newBaseResourceNotValidDataTypes = {
    school_id: 9769231419,
    name: 1234567890,
  };
  const newBaseResourceWrongLengthValues = {
    school_id: validMockSchoolId,
    name: "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
  };

  // payloads
  const baseResourcePayload = {
    _id: validMockBaseResourceId,
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const baseResourceNullPayload = null;
  const baseResourcesPayload = [
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Mathematics",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Language",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Physics",
    },
  ];
  const baseResourcesNullPayload: any[] = [];

  // test blocks
  describe("POST /baseResource ", () => {
    describe("baseResource::post::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        //code
      });
    });
    describe("baseResource::post::02 - Passing fields with empty values", () => {
      it("should return an empty fields error", async () => {
        //code
      });
    });
    describe("baseResource::post::03 - Passing an invalid type as a value", () => {
      it("should return a not valid value error", async () => {
        //code
      });
    });
    describe("baseResource::post::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        //code
      });
    });
    describe("baseResource::post::05 - Passing an non-existent school in the body", () => {
      it("should return a non-existent school error", async () => {
        //code
      });
    });
    describe("baseResource::post::06 - Passing an existing value", () => {
      it("should return a duplicated field error", async () => {
        //code
      });
    });
    describe("baseResource::post::07 - Passing a baseResource but not being created", () => {
      it("should not create a field", async () => {
        //code
      });
    });
    describe("baseResource::post::08 - Passing a baseResource correctly to create", () => {
      it("should create a field", async () => {
        // mock services
          // let findDuplicatedBaseResourceByIdService = mockService(
          //   baseResourcePayload,
          //   "findPopulateResourceById"
          // );
          // findDuplicatedBaseResourceByIdService = mockService(
          //   baseResourcePayload,
          //   "findPopulateResourceById"
          // );
          // const findBaseResourceByPropertyService = mockService(
          //   baseResourcesNullPayload,
          //   "findFilterResourceByProperty"
          // );
          // const insertBaseResourceService = mockService(
          //   BaseResourcePayload,
          //   "insertResource"
          // );

          // api call
          const { statusCode, body } = await supertest(server)
            .post(`${endPointUrl}`)
            .send(newBaseResource);

          // assertions
          expect(body).toEqual(
          expect.objectContaining({
             msg: "BaseResource endpoint working!",
           })
          );
          expect(statusCode).toBe(200);
          // expect(findDuplicatedBaseResourceByIdService).toHaveBeenCalledTimes(
          //   2
          // );
          // expect(findBaseResourceByPropertyService).toHaveBeenCalled();
          // expect(insertBaseResourceService).toHaveBeenCalled();
      });
    });
  });

  describe("GET /baseResource ", () => {
    describe("baseResource - GET", () => {
      describe("baseResource::get::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
          //code
        });
      });
      describe("baseResource::get::02 - passing fields with empty values", () => {
        it("should return an empty values error", async () => {
          //code
        });
      });
      describe("baseResource::get::03 - passing invalid ids", () => {
        it("should return an invalid id error", async () => {
          //code
        });
      });
      describe("baseResource::get::04 - Requesting all fields but not finding any", () => {
        it("should not get any fields", async () => {
          //code
        });
      });
      describe("baseResource::get::05 - Requesting all fields correctly", () => {
        it("should get all fields", async () => {
          //code
        });
      });
    });
    describe("baseResource - GET/:id", () => {
      describe("baseResource::get/:id::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
          //code
        });
      });
      describe("baseResource::get/:id::02 - Passing fields with empty values", () => {
        it("should return an empty values error", async () => {
          //code
        });
      });
      describe("baseResource::get/:id::03 - Passing invalid ids", () => {
        it("should return an invalid id error", async () => {
          //code
        });
      });
      describe("baseResource::get/:id::04 - Requesting a field but not finding it", () => {
        it("should not get a school", async () => {
          //code
        });
      });
      describe("baseResource::get/:id::05 - Requesting a field correctly", () => {
        it("should get a field", async () => {
          //code
        });
      });
    });
  });

  describe("PUT /baseResource ", () => {
    describe("baseResource::put::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        //code
      });
    });
    describe("baseResource::put::02 - Passing fields with empty values", () => {
      it("should return an empty field error", async () => {
        //code
      });
    });
    describe("baseResource::put::03 - Passing an invalid type as field value", () => {
      it("should return a not valid value error", async () => {
        //code
      });
    });
    describe("baseResource::put::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        //code
      });
    });
    describe("baseResource::put::05 - Passing a baseResource but not updating it because baseResource already exist", () => {
      it("should not update a baseResource", async () => {
        //code
      });
    });
    describe("baseResource::put::06 - Passing a baseResource but not updating it because it does not match the filters", () => {
      it("should not update a baseResource", async () => {
        //code
      });
    });
    describe("field::put::07 - Passing a field correctly to update", () => {
      it("should update a baseResource", async () => {
        //code
      });
    });
  });

  describe("DELETE /baseResource ", () => {
    describe("baseResource::delete::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        //code
      });
    });
    describe("baseResource::delete::02 - Passing fields with empty values", () => {
      it("should return a empty fields error", async () => {
        //code
      });
    });
    describe("baseResource::delete::03 - Passing invalid ids", () => {
      it("should return an invalid id error", async () => {
        //code
      });
    });
    describe("baseResource::delete::04 - Passing a baseResource id but not deleting it", () => {
      it("should not delete a school", async () => {
        //code
      });
    });
    describe("baseResource::delete::05 - Passing a baseResource id correctly to delete", () => {
      it("should delete a field", async () => {
        //code
      });
    });
  });
});
