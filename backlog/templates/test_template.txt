describe("RESOURCE => teacher_field", () => {
  // end point url
  const endPointUrl = "/api/v1/teacher_fields/";

  // inputs
  const validMockFieldId = new Types.ObjectId().toString();
  const validMockSchoolId = new Types.ObjectId().toString();
  //cspell:disable-next-line
  const invalidMockId = "63c5dcac78b868f80035asdf";
  const newField = {
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const newFieldMissingValues = {
    school_i: validMockSchoolId,
    nam: "Mathematics",
  };
  const newFieldEmptyValues = {
    school_id: "",
    name: "",
  };
  const newFieldNotValidDataTypes = {
    school_id: 9769231419,
    name: 1234567890,
  };
  const newFieldWrongLengthValues = {
    school_id: validMockSchoolId,
    name: "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
  };

  // payloads
  const fieldPayload = {
    _id: validMockFieldId,
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const fieldNullPayload = null;
  const fieldsPayload = [
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Mathematics",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Language",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Physics",
    },
  ];
  const fieldsNullPayload: any[] = [];

  // test blocks
  describe("POST /field ", () => {
    describe("field::post::01 - Passing a field with missing fields", () => {
      it("should return a field needed error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newFieldMissingValues);
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "Please add a school id",
        //     param: "school_id",
        //   },
        //   {
        //     location: "body",
        //     msg: "Please add a field name",
        //     param: "name",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).not.toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).not.toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::post::02 - Passing a field with empty fields", () => {
      it("should return an empty field error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newFieldEmptyValues);
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The school id field is empty",
        //     param: "school_id",
        //     value: "",
        //   },
        //   {
        //     location: "body",
        //     msg: "The field name is empty",
        //     param: "name",
        //     value: "",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).not.toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).not.toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::post::03 - Passing an invalid type as a value", () => {
      it("should return a not valid value error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newFieldNotValidDataTypes);
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The school id is not valid",
        //     param: "school_id",
        //     value: 9769231419,
        //   },
        //   {
        //     location: "body",
        //     msg: "The field name is not valid",
        //     param: "name",
        //     value: 1234567890,
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).not.toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).not.toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::post::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newFieldWrongLengthValues);
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The field name must not exceed 100 characters",
        //     param: "name",
        //     value:
        //       "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).not.toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).not.toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::post::05 - Passing an non-existent school in the body", () => {
      it("should return a non-existent school error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldNullPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newField);
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({
        //     msg: "Please make sure the school exists",
        //   })
        // );
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).not.toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::post::06 - Passing an existing field name", () => {
      it("should return a duplicated field error", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   [fieldPayload],
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newField);
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "This field name already exists" })
        // );
        // expect(statusCode).toBe(409);
        // expect(findSchoolByIdService).toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).toHaveBeenCalled();
        // expect(insertFieldService).not.toHaveBeenCalled();
      });
    });
    describe("school::post::07 - Passing a field but not being created", () => {
      it("should not create a field", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldsByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldNullPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newField);
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "Field not created!" })
        // );
        // expect(statusCode).toBe(400);
        // expect(findSchoolByIdService).toHaveBeenCalled();
        // expect(findDuplicatedFieldsByPropertyService).toHaveBeenCalled();
        // expect(insertFieldService).toHaveBeenCalled();
      });
    });
    describe("field::post::08 - Passing a field correctly to create", () => {
      it("should create a field", async () => {
        // // mock services
        // const findSchoolByIdService = mockService(
        //   fieldPayload,
        //   "findResourceById"
        // );
        // const findDuplicatedFieldByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const insertFieldService = mockService(
        //   fieldPayload,
        //   "insertResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .post(`${endPointUrl}`)
        //   .send(newField);
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "Field created successfully!" })
        // );
        // expect(statusCode).toBe(201);
        // expect(findSchoolByIdService).toHaveBeenCalled();
        // expect(findDuplicatedFieldByPropertyService).toHaveBeenCalled();
        // expect(insertFieldService).toHaveBeenCalled();
      });
    });
  });

  describe("GET /field ", () => {
    describe("field - GET", () => {
      describe("field::get::01 - passing a field with missing values", () => {
        it("should return a missing values error", async () => {
          // // mock services
          // const findAllFieldsService = mockService(
          //   fieldsPayload,
          //   "findFilterAllResources"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}`)
          //   .send();
          // // assertions
          // expect([
          //   {
          //     location: "body",
          //     msg: "Please add a school id",
          //     param: "school_id",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findAllFieldsService).not.toHaveBeenCalled();
        });
      });
      describe("field::get::02 - passing a field with empty values", () => {
        it("should return an empty values error", async () => {
          // // mock services
          // const findAllFieldsService = mockService(
          //   fieldsPayload,
          //   "findFilterAllResources"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}`)
          //   .send({ school_id: "" });
          // // assertions
          // expect([
          //   {
          //     location: "body",
          //     msg: "The school id field is empty",
          //     param: "school_id",
          //     value: "",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findAllFieldsService).not.toHaveBeenCalled();
        });
      });
      describe("field::get::03 - passing and invalid school id", () => {
        it("should get all fields", async () => {
          // // mock services
          // const findAllFieldsService = mockService(
          //   fieldsPayload,
          //   "findFilterAllResources"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}`)
          //   .send({ school_id: invalidMockId });
          // // assertions
          // expect([
          //   {
          //     location: "body",
          //     msg: "The school id is not valid",
          //     param: "school_id",
          //     //cspell:disable-next-line
          //     value: "63c5dcac78b868f80035asdf",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findAllFieldsService).not.toHaveBeenCalled();
        });
      });
      describe("field::get::04 - Requesting all fields but not finding any", () => {
        it("should not get any fields", async () => {
          // // mock services
          // const findAllFieldsService = mockService(
          //   fieldsNullPayload,
          //   "findFilterAllResources"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}`)
          //   .send({ school_id: validMockSchoolId });
          // // assertions
          // expect(body).toEqual(
          //   expect.objectContaining({
          //     msg: "No fields found",
          //   })
          // );
          // expect(statusCode).toBe(404);
          // expect(findAllFieldsService).toHaveBeenCalled();
        });
      });
      describe("field::get::05 - Requesting all fields correctly", () => {
        it("should get all fields", async () => {
          // // mock services
          // const findAllFieldsService = mockService(
          //   fieldsPayload,
          //   "findFilterAllResources"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}`)
          //   .send({ school_id: validMockSchoolId });
          // // assertions
          // expect([
          //   {
          //     _id: expect.any(String),
          //     name: "Mathematics",
          //     school_id: expect.any(String),
          //   },
          //   {
          //     _id: expect.any(String),
          //     name: "Language",
          //     school_id: expect.any(String),
          //   },
          //   {
          //     _id: expect.any(String),
          //     name: "Physics",
          //     school_id: expect.any(String),
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(200);
          // expect(findAllFieldsService).toHaveBeenCalled();
        });
      });
    });
    describe("field - GET/:id", () => {
      describe("field::get/:id::01 - Passing a field with missing values", () => {
        it("should return a missing values error", async () => {
          // // mock services
          // const findFieldByIdService = mockService(
          //   fieldPayload,
          //   "findFilterResourceByProperty"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}${validMockFieldId}`)
          //   .send();
          // // assertions
          // expect([
          //   {
          //     location: "body",
          //     msg: "Please add a school id",
          //     param: "school_id",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findFieldByIdService).not.toHaveBeenCalled();
        });
      });
      describe("field::get/:id::02 - Passing a field with empty values", () => {
        it("should return an empty values error", async () => {
          // // mock services
          // const findFieldByIdService = mockService(
          //   fieldPayload,
          //   "findFilterResourceByProperty"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}${validMockFieldId}`)
          //   .send({ school_id: "" });
          // // assertions
          // expect([
          //   {
          //     location: "body",
          //     msg: "The school id field is empty",
          //     param: "school_id",
          //     value: "",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findFieldByIdService).not.toHaveBeenCalled();
        });
      });
      describe("field::get/:id::03 - Passing an invalid field and school ids in the url", () => {
        it("should return an invalid id error", async () => {
          // // mock services
          // const findFieldByIdService = mockService(
          //   fieldPayload,
          //   "findFilterResourceByProperty"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}${invalidMockId}`)
          //   .send({ school_id: invalidMockId });
          // // assertions
          // expect([
          //   {
          //     location: "params",
          //     msg: "The field id is not valid",
          //     param: "id",
          //     //cspell:disable-next-line
          //     value: "63c5dcac78b868f80035asdf",
          //   },
          //   {
          //     location: "body",
          //     msg: "The school id is not valid",
          //     param: "school_id",
          //     //cspell:disable-next-line
          //     value: "63c5dcac78b868f80035asdf",
          //   },
          // ]).toMatchObject(body);
          // expect(statusCode).toBe(400);
          // expect(findFieldByIdService).not.toHaveBeenCalled();
        });
      });
      describe("field::get/:id::04 - Requesting a field but not finding it", () => {
        it("should not get a school", async () => {
          // // mock services
          // const findFieldByIdService = mockService(
          //   fieldsNullPayload,
          //   "findFilterResourceByProperty"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}${validMockFieldId}`)
          //   .send({ school_id: validMockSchoolId });
          // // assertions
          // expect(body).toEqual(
          //   expect.objectContaining({
          //     msg: "Field not found",
          //   })
          // );
          // expect(statusCode).toBe(404);
          // expect(findFieldByIdService).toHaveBeenCalled();
        });
      });
      describe("field::get/:id::05 - Requesting a field correctly", () => {
        it("should get a field", async () => {
          // // mock services
          // const findFieldByIdService = mockService(
          //   fieldPayload,
          //   "findFilterResourceByProperty"
          // );
          // // api call
          // const { statusCode, body } = await supertest(server)
          //   .get(`${endPointUrl}${validMockFieldId}`)
          //   .send({ school_id: validMockSchoolId });
          // // assertions
          // expect(body).toEqual(
          //   expect.objectContaining({
          //     _id: expect.any(String),
          //     name: "Mathematics",
          //   })
          // );
          // expect(statusCode).toBe(200);
          // expect(findFieldByIdService).toHaveBeenCalled();
        });
      });
    });
  });

  describe("PUT /field ", () => {
    describe("field::put::01 - Passing a field with missing fields", () => {
      it("should return a field needed error", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newFieldMissingValues, prevNam: "Science" });
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "Please add a school id",
        //     param: "school_id",
        //   },
        //   {
        //     location: "body",
        //     msg: "Please add a field name",
        //     param: "name",
        //   },
        //   {
        //     location: "body",
        //     msg: "Please add the previous field name",
        //     param: "prevName",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(
        //   findFieldNameDuplicatedByPropertyService
        // ).not.toHaveBeenCalled();
        // expect(updateFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::put::02 - Passing a field with empty fields", () => {
      it("should return an empty field error", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newFieldEmptyValues, prevName: "" });
        // //assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The school id field is empty",
        //     param: "school_id",
        //     value: "",
        //   },
        //   {
        //     location: "body",
        //     msg: "The name field is empty",
        //     param: "name",
        //     value: "",
        //   },
        //   {
        //     location: "body",
        //     msg: "The previous field name is empty",
        //     param: "prevName",
        //     value: "",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(
        //   findFieldNameDuplicatedByPropertyService
        // ).not.toHaveBeenCalled();
        // expect(updateFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::put::03 - Passing an invalid type as field value", () => {
      it("should return a not valid value error", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newFieldNotValidDataTypes, prevName: 12341234 });
        // //assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The school id is not valid",
        //     param: "school_id",
        //     value: 9769231419,
        //   },
        //   {
        //     location: "body",
        //     msg: "The field name is not valid",
        //     param: "name",
        //     value: 1234567890,
        //   },
        //   {
        //     location: "body",
        //     msg: "The previous field name is not valid",
        //     param: "prevName",
        //     value: 12341234,
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(
        //   findFieldNameDuplicatedByPropertyService
        // ).not.toHaveBeenCalled();
        // expect(updateFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::put::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({
        //     ...newFieldWrongLengthValues,
        //     prevName:
        //       "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
        //   });
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The name must not exceed 100 characters",
        //     param: "name",
        //     value:
        //       "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
        //   },
        //   {
        //     location: "body",
        //     msg: "The previous field name must not exceed 100 characters",
        //     param: "prevName",
        //     value:
        //       "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(
        //   findFieldNameDuplicatedByPropertyService
        // ).not.toHaveBeenCalled();
        // expect(updateFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::put::05 - Passing a field but not updating it because the field name, prevName, already exists for the school", () => {
      it("should not update a field", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldNullPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newField, prevName: "Science" });
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({
        //     msg: "This field name already exists!",
        //   })
        // );
        // expect(statusCode).toBe(409);
        // expect(findFieldNameDuplicatedByPropertyService).toHaveBeenCalled();
        // expect(updateFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::put::06 - Passing a field but not updating it because it does not match one of the filters: _id, school_id or previous name", () => {
      it("should not update a field", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldNullPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newField, prevName: "Science" });
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({
        //     msg: "Field not updated",
        //   })
        // );
        // expect(statusCode).toBe(404);
        // expect(findFieldNameDuplicatedByPropertyService).toHaveBeenCalled();
        // expect(updateFieldService).toHaveBeenCalled();
      });
    });
    describe("field::put::11 - Passing a field correctly to update", () => {
      it("should update a field", async () => {
        // // mock services
        // const findFieldNameDuplicatedByPropertyService = mockService(
        //   fieldsNullPayload,
        //   "findFilterResourceByProperty"
        // );
        // const updateFieldService = mockService(
        //   fieldPayload,
        //   "updateFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .put(`${endPointUrl}${validMockFieldId}`)
        //   .send({ ...newField, prevName: "Science" });
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "Field updated" })
        // );
        // expect(statusCode).toBe(200);
        // expect(findFieldNameDuplicatedByPropertyService).toHaveBeenCalled();
        // expect(updateFieldService).toHaveBeenCalled();
      });
    });
  });

  describe("DELETE /field ", () => {
    describe("field::delete::01 - Passing a field with missing fields", () => {
      it("should return a missing fields error", async () => {
        // // mock services
        // const deleteFieldService = mockService(
        //   fieldNullPayload,
        //   "deleteFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .delete(`${endPointUrl}${validMockFieldId}`)
        //   .send();
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "Please add a school id",
        //     param: "school_id",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(deleteFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::delete::02 - Passing a field with empty fields", () => {
      it("should return a empty fields error", async () => {
        // // mock services
        // const deleteFieldService = mockService(
        //   fieldNullPayload,
        //   "deleteFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .delete(`${endPointUrl}${validMockFieldId}`)
        //   .send({ school_id: "" });
        // // assertions
        // expect([
        //   {
        //     location: "body",
        //     msg: "The school id field is empty",
        //     param: "school_id",
        //     value: "",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(deleteFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::delete::03 - Passing an invalid field id in the url", () => {
      it("should return an invalid id error", async () => {
        // // mock services
        // const deleteFieldService = mockService(
        //   fieldNullPayload,
        //   "deleteFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .delete(`${endPointUrl}${invalidMockId}`)
        //   .send({ school_id: invalidMockId });
        // // assertions
        // expect([
        //   {
        //     location: "params",
        //     msg: "The field id is not valid",
        //     param: "id",
        //     //cspell:disable-next-line
        //     value: "63c5dcac78b868f80035asdf",
        //   },
        //   {
        //     location: "body",
        //     msg: "The school id is not valid",
        //     param: "school_id",
        //     //cspell:disable-next-line
        //     value: "63c5dcac78b868f80035asdf",
        //   },
        // ]).toMatchObject(body);
        // expect(statusCode).toBe(400);
        // expect(deleteFieldService).not.toHaveBeenCalled();
      });
    });
    describe("field::delete::04 - Passing a field id but not deleting it", () => {
      it("should not delete a school", async () => {
        // // mock services
        // const deleteFieldService = mockService(
        //   fieldNullPayload,
        //   "deleteFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .delete(`${endPointUrl}${validMockFieldId}`)
        //   .send({ school_id: validMockSchoolId });
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "Field not deleted" })
        // );
        // expect(statusCode).toBe(404);
        // expect(deleteFieldService).toHaveBeenCalled();
      });
    });
    describe("field::delete::05 - Passing a field id correctly to delete", () => {
      it("should delete a field", async () => {
        // // mock services
        // const deleteFieldService = mockService(
        //   fieldPayload,
        //   "deleteFilterResource"
        // );
        // // api call
        // const { statusCode, body } = await supertest(server)
        //   .delete(`${endPointUrl}${validMockFieldId}`)
        //   .send({ school_id: validMockSchoolId });
        // // assertions
        // expect(body).toEqual(
        //   expect.objectContaining({ msg: "Field deleted" })
        // );
        // expect(statusCode).toBe(200);
        // expect(deleteFieldService).toHaveBeenCalled();
      });
    });
  });
});
