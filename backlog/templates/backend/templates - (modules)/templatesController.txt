import { Request, Response } from "express";
import { StatusCodes } from "http-status-codes";
import BadRequestError from "../../errors/bad-request";
import ConflictError from "../../errors/conflict";
import NotFoundError from "../../errors/not-found";

import {
  insertTemplate,
  findTemplateByProperty,
  findFilterAllTemplates,
  findFilterTemplateByProperty,
  modifyFilterTemplate,
  removeFilterTemplate,
  /* Services from other entities */
  findSchoolById,
} from "./templateServices";

// continue here --> test the functionality manually

// @desc create a template
// @route POST /api/v1/templates
// @access Private
// @fields: body {school_id:[string] , name:[string]}
const createTemplate = async ({ body }: Request, res: Response) => {
  /* destructure the fields */
  const { school_id, name } = body;
  /* check if the school exists */
  const schoolSearchCriteria = school_id;
  const schoolFieldsToReturn = "-createdAt -updatedAt";
  const existingSchool = await findSchoolById(
    schoolSearchCriteria,
    schoolFieldsToReturn
  );
  if (!existingSchool) {
    throw new ConflictError("Please create the school first");
  }
  /* check if the template name is already in use */
  const searchCriteria = { school_id, name };
  const fieldsToReturn = "-createdAt -updatedAt";
  const duplicateSchool = await findTemplateByProperty(
    searchCriteria,
    fieldsToReturn
  );
  if (duplicateSchool) {
    throw new ConflictError("This school name already exists");
  }
  /* create the template  */
  const newTemplate = {
    school_id: school_id,
    name: name,
  };
  const templateCreated = await insertTemplate(newTemplate);
  if (!templateCreated) {
    throw new BadRequestError("Template not created");
  }
  res
    .status(StatusCodes.CREATED)
    .json({ msg: "Template created successfully!" });
};

// @desc get all the templates
// @route GET /api/v1/templates
// @access Private
// @fields: body {school_id:[string]}
const getTemplates = async ({ body }: Request, res: Response) => {
  /* destructure the fields */
  const { school_id } = body;
  /* filter by school id */
  const filters = { school_id: school_id };
  const fieldsToReturn = "-createdAt -updatedAt";
  const templatesFound = await findFilterAllTemplates(filters, fieldsToReturn);
  /* get all fields */
  if (templatesFound?.length === 0) {
    throw new NotFoundError("No templates found");
  }
  res.status(StatusCodes.OK).json(templatesFound);
};

// @desc get the template by id
// @route GET /api/v1/templates/:id
// @access Private
// @fields: params: {id:[string]},  body: {school_id:[string]}
const getTemplate = async ({ params, body }: Request, res: Response) => {
  /* destructure the fields */
  const { id: _id } = params;
  const { school_id } = body;
  /* get the template */
  const searchCriteria = { school_id, _id };
  const fieldsToReturn = "-createdAt -updatedAt";
  const templateFound = await findTemplateByProperty(
    searchCriteria,
    fieldsToReturn
  );
  if (!templateFound) {
    throw new NotFoundError("Template not found");
  }
  res.status(StatusCodes.OK).json(templateFound);
};

// @desc update a template
// @route PUT /api/v1/templates/:id
// @access Private
// @fields: params: {id:[string]},  body {school_id:[string] , name:[string]}
const updateTemplate = async ({ params, body }: Request, res: Response) => {
  /* destructure the fields*/
  const { id: templateId } = params;
  const { school_id, name } = body;
  /* check if the template is already in use by another template */
  const searchCriteria = { school_id, name };
  const fieldsToReturn = "-createdAt -updatedAt";
  const duplicateName = await findTemplateByProperty(
    searchCriteria,
    fieldsToReturn
  );
  if (duplicateName && duplicateName?._id?.toString() !== templateId) {
    throw new ConflictError("Please try a different template name");
  }
  /* update if the template and school ids are the same one as the one passed and update the field */
  const filtersUpdate = { _id: templateId, school_id: school_id };
  const newTemplate = {
    school_id: school_id,
    name: name,
  };
  const templateUpdated = await modifyFilterTemplate(
    filtersUpdate,
    newTemplate
  );
  if (!templateUpdated) {
    throw new NotFoundError("Template not updated");
  }
  res.status(StatusCodes.OK).json({ msg: "Template updated" });
};

// @desc delete a template
// @route DELETE /api/v1/templates/:id
// @access Private
// @fields: params: {id:[string]},  body: {school_id:[string]}
const deleteTemplate = async ({ params, body }: Request, res: Response) => {
  /* destructure the fields from the params and body */
  const { id: templateId } = params;
  const { school_id } = body;
  /* delete template */
  const filtersDelete = { school_id: school_id, _id: templateId };
  const templateDeleted = await removeFilterTemplate(filtersDelete);
  if (!templateDeleted) {
    throw new NotFoundError("Template not deleted");
  }
  res.status(StatusCodes.OK).json({ msg: "Template deleted" });
};

export {
  createTemplate,
  getTemplates,
  getTemplate,
  updateTemplate,
  deleteTemplate,
};
