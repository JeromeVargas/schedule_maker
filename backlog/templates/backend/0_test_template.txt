describe("Resource => BaseResource", () => {
  // end point url
  const endPointUrl = "/api/v1/baseResources/";

  // inputs
  const validMockBaseResourceId = new Types.ObjectId().toString();
  const validMockSchoolId = new Types.ObjectId().toString();  
  const otherValidMockId = new Types.ObjectId().toString();
  const invalidMockId = "63c5dcac78b868f80035asdf";
  const newBaseResource = {
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const newBaseResourceMissingValues = {
    school_i: validMockSchoolId,
    nam: "Mathematics",
  };
  const newBaseResourceEmptyValues = {
    school_id: "",
    name: "",
  };
  const newBaseResourceNotValidDataTypes = {
    school_id: invalidMockId,
    name: 1234567890,
  };
  const newBaseResourceWrongLengthValues = {
    school_id: validMockSchoolId,
    name: "Lorem ipsum dolor sit amet consectetur adipisicing elit Maiores laborum aspernatur similique sequi am",
  };

  // payloads
  const baseResourcePayload = {
    _id: validMockBaseResourceId,
    school_id: validMockSchoolId,
    name: "Mathematics",
  };
  const baseResourceNullPayload = null;
  const baseResourcesPayload = [
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Mathematics",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Language",
    },
    {
      _id: new Types.ObjectId().toString(),
      school_id: new Types.ObjectId().toString(),
      name: "Physics",
    },
  ];
  const baseResourcesNullPayload: any[] = [];

  // test blocks
  describe("POST /baseResource ", () => {
    describe("baseResource::post::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        //code
      });
    });
    describe("baseResource::post::02 - Passing fields with empty values", () => {
      it("should return an empty fields error", async () => {
        //code
      });
    });
    describe("baseResource::post::03 - Passing an invalid type as a value", () => {
      it("should return a not valid value error", async () => {
        //code
      });
    });
    describe("baseResource::post::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        //code
      });
    });
    describe("baseResource::post::05 - Passing an non-existent school in the body", () => {
      it("should return a non-existent school error", async () => {
        //code
      });
    });
    describe("baseResource::post::06 - Passing an existing value", () => {
      it("should return a duplicated field error", async () => {
        //code
      });
    });
    describe("baseResource::post::07 - Passing a baseResource but not being created", () => {
      it("should not create a baseResource", async () => {
        //code
      });
    });
    describe("baseResource::post::08 - Passing a baseResource correctly to create", () => {
      it("should create a baseResource", async () => {
        // // mock services
        // const duplicateOtherBaseResource = mockService(
        //     otherBaseResourcePayload,
        //     "findPopulateResourceById"
        //   );
        //   const insertBaseResource = mockService(
        //     baseResourcePayload,
        //     "insertResource"
        //   );

          // api call
          const { statusCode, body } = await supertest(server)
            .post(`${endPointUrl}`)
            .send(newBaseResource);

          // assertions
          expect(body).toStrictEqual(
            {
               msg: "BaseResource post endpoint working!",
             }
            );          
          expect(statusCode).toBe(200);
        //   expect(duplicateOtherBaseResource).toHaveBeenCalled();
        //   expect(duplicateOtherBaseResource).toHaveBeenCalledWith("parameterOne", "parameterTwo", "parameterThree");
        //   expect(insertBaseResource).toHaveBeenCalled();          
        //   expect(insertBaseResource).toHaveBeenCalledWith("parameterOne", "parameterTwo", "parameterThree");          
      });
    });
  });

  describe("GET /baseResource ", () => {
    describe("baseResource - GET", () => {
      describe("baseResource::get::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
        //   // mock services
        //   const findBaseResources = mockService(
        //     baseResourcesNullPayload,
        //     "findFilterAllResources"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}`)
        //     .send({ school_i: validMockSchoolId });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "body",
        //       msg: "Please add a school id",
        //       param: "school_id",
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResources).not.toHaveBeenCalled();
        //   expect(findBaseResources).not.toHaveBeenCalledWith(
        //       { school_id: null },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get::02 - passing fields with empty values", () => {
        it("should return an empty values error", async () => {
        // // mock services
        //   const findBaseResources = mockService(
        //     baseResourcesNullPayload,
        //     "findFilterAllResources"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}`)
        //     .send({ school_id: "" });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "body",
        //       msg: "The school id field is empty",
        //       param: "school_id",
        //       value: "",
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResources).not.toHaveBeenCalled();
        //   expect(findBaseResources).not.toHaveBeenCalledWith(
        //       { school_id: "" },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get::03 - passing invalid ids", () => {
        it("should return an invalid id error", async () => {
        //   // mock services
        //   const findBaseResources = mockService(
        //     baseResourcesNullPayload,
        //     "findFilterAllResources"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}`)
        //     .send({ school_id: invalidMockId });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "body",
        //       msg: "The school id is not valid",
        //       param: "school_id",
        //       value: invalidMockId,
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResources).not.toHaveBeenCalled();
        //   expect(findBaseResources).not.toHaveBeenCalledWith(
        //       { school_id: invalidMockId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get::04 - Requesting all baseResources but not finding any", () => {
        it("should not get any fields", async () => {
        //   // mock services
        //   const findBaseResources = mockService(
        //     baseResourcesNullPayload,
        //     "findFilterAllResources"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}`)
        //     .send({ school_id: otherValidMockId });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     { msg: "No baseResources found" }
        //   );
        //   expect(statusCode).toBe(404);
        //   expect(findBaseResources).toHaveBeenCalled();
        //   expect(findBaseResources).toHaveBeenCalledWith(
        //       { school_id: otherValidMockId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get::05 - Requesting all baseResources correctly", () => {
        it("should get all fields", async () => {
        //   // mock services
        //   const findBaseResources = mockService(
        //     baseResourcesPayload,
        //     "findFilterAllResources"
        //   );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual(
            {
               msg: "BaseResource get endpoint working!",
             }
            );          
        //   expect(body).toStrictEqual(baseResourcesPayload);
          expect(statusCode).toBe(200);
        //   expect(findBaseResources).toHaveBeenCalled();
        //   expect(findBaseResources).toHaveBeenCalledWith(
        //       { school_id: validMockSchoolId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });        
      });
    });

    describe("baseResource - GET/:id", () => {
      describe("baseResource::get/:id::01 - Passing missing fields", () => {
        it("should return a missing values error", async () => {
        //   // mock services
        //   const findBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "findResourceByProperty"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}${validMockBaseResourceId}`)
        //     .send({ school_i: validMockSchoolId });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     [
        //       {
        //         location: "body",
        //         msg: "Please add a school id",
        //         param: "school_id",
        //       },
        //     ]
        //   );
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResource).not.toHaveBeenCalled();
        //   expect(findBaseResource).not.toHaveBeenCalledWith(
        //       { _id: validMockBaseResourceId , school_id: null },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get/:id::02 - Passing fields with empty values", () => {
        it("should return an empty values error", async () => {
        //   // mock services
        //   const findBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "findResourceByProperty"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}${validMockBaseResourceId}`)
        //     .send({ school_id: "" });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     [
        //       {
        //         location: "body",
        //         msg: "The school id field is empty",
        //         param: "school_id",
        //         value: "",
        //       },
        //     ]
        //   );
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResource).not.toHaveBeenCalled();
        //   expect(findBaseResource).not.toHaveBeenCalledWith(
        //       { _id: validMockBaseResourceId , school_id: "" },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get/:id::03 - Passing invalid ids", () => {
        it("should return an invalid id error", async () => {
        //   // mock services
        //   const findBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "findResourceByProperty"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}${invalidMockId}`)
        //     .send({ school_id: invalidMockId });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     [
        //      {
        //        location: "params",
        //        msg: "The baseResource id is not valid",
        //         param: "id",
        //         value: invalidMockId,
        //       },
        //       {
        //         location: "body",
        //         msg: "The school id is not valid",
        //         param: "school_id",
        //         value: invalidMockId,
        //       },
        //     ]
        //   );
        //   expect(statusCode).toBe(400);
        //   expect(findBaseResource).not.toHaveBeenCalled();
        //   expect(findBaseResource).not.toHaveBeenCalledWith(
        //       { _id: invalidMockId , school_id: invalidMockId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get/:id::04 - Requesting a baseResource but not finding it", () => {
        it("should not get a school", async () => {
        //   // mock services
        //   const findBaseResource = mockService(
        //     baseResourcesNullPayload,
        //     "findResourceByProperty"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .get(`${endPointUrl}${otherValidMockId}`)
        //     .send({ school_id: validMockSchoolId });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     {
        //       msg: "BaseResource not found",
        //     }
        //   );
        //   expect(statusCode).toBe(404);
        //   expect(findBaseResource).toHaveBeenCalled();
        //   expect(findBaseResource).toHaveBeenCalledWith(
        //       { _id: otherValidMockId , school_id: validMockSchoolId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
      describe("baseResource::get/:id::05 - Requesting a baseResource correctly", () => {
        it("should get a field", async () => {
        //   // mock services
        //   const findBaseResource = mockService(
        //     baseResourcePayload,
        //     "findResourceByProperty"
        //   );

          // api call
          const { statusCode, body } = await supertest(server)
            .get(`${endPointUrl}${validMockBaseResourceId}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual(
            {
               msg: "BaseResource get/:id endpoint working!",
             }
            );          
        //   expect(body).toStrictEqual(baseResourcePayload);
          expect(statusCode).toBe(200);
        //   expect(findBaseResource).toHaveBeenCalled();
        //   expect(findBaseResource).toHaveBeenCalledWith(
        //       { _id: validMockBaseResourceId , school_id: validMockSchoolId },
        //       "-createdAt -updatedAt",
        //       "baseResource"
        //     );
        });
      });
    });
  });

  describe("PUT /baseResource ", () => {
    describe("baseResource::put::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        //code
      });
    });
    describe("baseResource::put::02 - Passing fields with empty values", () => {
      it("should return an empty field error", async () => {
        //code
      });
    });
    describe("baseResource::put::03 - Passing an invalid type as field value", () => {
      it("should return a not valid value error", async () => {
        //code
      });
    });
    describe("baseResource::put::04 - Passing too long or short input values", () => {
      it("should return an invalid length input value error", async () => {
        //code
      });
    });
    describe("baseResource::put::05 - Passing a baseResource but not updating it because baseResource already exist", () => {
      it("should not update a baseResource", async () => {
        //code
      });
    });
    describe("baseResource::put::06 - Passing a baseResource but not updating it because it does not match the filters", () => {
      it("should not update a baseResource", async () => {
        //code
      });
    });
    describe("baseResource::put::07 - Passing a baseResource correctly to update", () => {
      it("should update a baseResource", async () => {
        // // mock services
        // const duplicateOtherResource = mockService(
        //     otherResourcePayload,
        //     "findPopulateResourceById"
        //   );
        //   const updateBaseResource = mockService(
        //     baseResourcePayload,
        //     "updateFilterResource"
        //   );

          // api call
          const { statusCode, body } = await supertest(server)
            .put(`${endPointUrl}${validMockBaseResourceId}`)
            .send(newBaseResource);

          // assertions
          expect(body).toStrictEqual(
            {
               msg: "BaseResource put endpoint working!",
             }
            );          
          expect(statusCode).toBe(200);
        //   expect(duplicateOtherResource).toHaveBeenCalled();
        //   expect(duplicateOtherResource).toHaveBeenCalledWith("parameterOne", "parameterTwo", "parameterThree");
        //   expect(updateBaseResource).toHaveBeenCalled();
        //   expect(updateBaseResource).toHaveBeenCalledWith("parameterOne", "parameterTwo", "parameterThree");
      });
    });
  });

  describe("DELETE /baseResource ", () => {
    describe("baseResource::delete::01 - Passing missing fields", () => {
      it("should return a missing fields error", async () => {
        // // mock services
        // const deleteBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "deleteFilterResource"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .delete(`${endPointUrl}${validMockBaseResourceId}`)
        //     .send({ school_i: validMockSchoolId });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "body",
        //       msg: "Please add a school id",
        //       param: "school_id",
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(deleteBaseResource).not.toHaveBeenCalled();
        //   expect(deleteBaseResource).not.toHaveBeenCalledWith({ _id: validMockBaseResourceId, school_id: validMockSchoolId },
        //     "baseResource");
      });
    });
    describe("baseResource::delete::02 - Passing fields with empty values", () => {
      it("should return a empty fields error", async () => {
        // // mock services
        // const deleteBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "deleteFilterResource"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .delete(`${endPointUrl}${validMockBaseResourceId}`)
        //     .send({ school_id: "" });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "body",
        //       msg: "The school id field is empty",
        //       param: "school_id",
        //       value: "",
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(deleteBaseResource).not.toHaveBeenCalled();
        //   expect(deleteBaseResource).not.toHaveBeenCalledWith({ _id: validMockBaseResourceId, school_id: validMockSchoolId },
        //     "baseResource");
      });
    });
    describe("baseResource::delete::03 - Passing invalid ids", () => {
      it("should return an invalid id error", async () => {
        // // mock services
        // const deleteBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "deleteFilterResource"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .delete(`${endPointUrl}${invalidMockId}`)
        //     .send({ school_id: invalidMockId });

        //   // assertions
        //   expect(body).toStrictEqual([
        //     {
        //       location: "params",
        //       msg: "The baseResource id is not valid",
        //       param: "id",
        //       value: invalidMockId,
        //     },
        //     {
        //       location: "body",
        //       msg: "The school id is not valid",
        //       param: "school_id",
        //       value: invalidMockId,
        //     },
        //   ]);
        //   expect(statusCode).toBe(400);
        //   expect(deleteBaseResource).not.toHaveBeenCalled();
        //   expect(deleteBaseResource).not.toHaveBeenCalledWith({ _id: validMockBaseResourceId, school_id: validMockSchoolId },
        //     "baseResource");
      });
    });
    describe("baseResource::delete::04 - Passing a baseResource id but not deleting it", () => {
      it("should not delete a school", async () => {
        // // mock services
        // const deleteBaseResource = mockService(
        //     baseResourceNullPayload,
        //     "deleteFilterResource"
        //   );

        //   // api call
        //   const { statusCode, body } = await supertest(server)
        //     .delete(`${endPointUrl}${validMockBaseResourceId}`)
        //     .send({ school_id: validMockSchoolId });

        //   // assertions
        //   expect(body).toStrictEqual(
        //     { msg: "BaseResource not deleted" }
        //   );
        //   expect(statusCode).toBe(404);
        //   expect(deleteBaseResource).toHaveBeenCalled();
        //   expect(deleteBaseResource).toHaveBeenCalledWith({ _id: validMockBaseResourceId, school_id: validMockSchoolId },
        //     "baseResource");
      });
    });
    describe("baseResource::delete::05 - Passing a baseResource id correctly to delete", () => {
      it("should delete a field", async () => {
        // // mock services
        // const deleteBaseResource = mockService(
        //     baseResourcePayload,
        //     "deleteFilterResource"
        //   );

          // api call
          const { statusCode, body } = await supertest(server)
            .delete(`${endPointUrl}${validMockBaseResourceId}`)
            .send({ school_id: validMockSchoolId });

          // assertions
          expect(body).toStrictEqual(
            {
               msg: "BaseResource delete endpoint working!",
             }
            );          
        //   expect(body).toStrictEqual(
        // { msg: "BaseResource deleted" }
        //   );
          expect(statusCode).toBe(200);
        //   expect(deleteBaseResource).toHaveBeenCalled();
        //   expect(deleteBaseResource).toHaveBeenCalledWith({ _id: validMockBaseResourceId, school_id: validMockSchoolId },
        //     "baseResource");
      });
    });
  });
});
